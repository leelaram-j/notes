Apache Maven:

Software project management and build management tool java frameworks
convention over configuration

advantages:
central repository. with maven we need not import test cases. POM.xml for maven.
we will give the dependencies of selenoum and we will give other dependencies. maven will itself take care of the rest. It will itself go to the web and download the required jars and save them to the folder. It will take care of the dependencies.

https://mvnrepository.com

jars should not be harcoded, in real life. 

pom--project object model

maven central repository to get dependencies.
maintaining common structure across the organization.
Flexibility in integration with CI tools.
Plugins for Test Framework Execution.
- usage of testng and junit

google search: maven in 5 mins
https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html

paste the dependency code in the xml file.

proper hierarchy structure

good integration with testng

good integration with jenkins

Maven Terminologies:

group Id: this determines the project uniquely
Artifacts: usually the jar file, that gets deployed to a maven repository, subproject id. cos in project selenium there can be there many sub id's
version: the required version for the sub project selected.
archtype:generate -> this generates a new project from an archtype

mvn archtype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-quickstart -DinteractiveMode=false

Interview Question:
In the above command--> groupId will be the name of the package whereas artifactId will be the name of the Project

starting:

mvn -verison-> to check the installation of maven

navigate to the folder.
mvn archetype:generate

give random number

For intellij it is easy to use, since you can just import the project into it. This can be done in Intellij Idea UI.
For Eclipse you need to run the below command in terminal, but before that navgate to teh folder having pom.xml and then give the below command.

mvn eclipse:eclipse

then you can use it in eclipse.

sample pom.xml file PFB.

<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>Framework</groupId>
  <artifactId>Training</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>Training</name>
  <!-- FIXME change it to the project's website -->
  <url>https://www.bankbazaar.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.testng/testng -->
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>6.14.3</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <version>3.14.0</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.6</version>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.7.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
          <plugin>
              <!-- <groupId>org.apache.maven.plugins</groupId> -->
              <artifactId>maven-surefire-plugin</artifactId>
              <version>2.21.0</version>
              <configuration>
                  <suiteXmlFiles>
                      <suiteXmlFile>testng.xml</suiteXmlFile>
                  </suiteXmlFiles>
              </configuration>
          </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>

Interview question:
maven sure-fire plugin
it is must for running maven tests. without this we cant run tests. It must be in parent POM file in case if 2 POM files are used.

mvn clean--> this will clear the previous builds temp files or buils etc...
mvn compile--> it will compile the code and tells us if there are any compilation issues.
mvn test--> It will start execution of tests.

maven algorithm, it expects the class name to end with Test.java, the only it recognizes the class file else it wont run the tests.


Once this is done here in the above testng.xml is the xml file which defines which all test needed to be run. we can specify which all packages needed to be run. We can also specify to run 2 xml files at one time.

say we have 2 xml file one for build validation and regression, we can create profiles in the pom.xml file
PFB

<profiles>
	<profile>
		<id>BuildValidation</id>
		<build>put the entire build tag data here</build>
	</profile>
</profiles>


in the above manner we can create profiles and call out the specific profile while using
"mvn test -PBuildValidation" command