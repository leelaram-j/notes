Annotations:

@Test-> for test cases followed by function in which steps are written
@BeforeTest-> for executing some prerequisites before running a test case, note: It only runs once.
@BeforeMethod-> for executing some prerequisites before running every test case.
@AfterTest-> for executing some steps after running all the tests, note: It only runs once.
@AfterMethod->for executing postrequsites after running every test 
@BeforeSuite-> It will run before the entire test suite is executed.
@AfterSuite-> It will run after the entire test suite is executed.
@BeforeClass-> before running any methods in that class, before class content will be executed
@AfterClass-> after executing all the methods in that class. if that class after method function, after class will run after that has been executed.

The scope of AfterTest--> if the after test annotation is written in a class, and the same class is used in test module in xml...after test will execute after the module is executed, before starting the next module. this is an expected thing.

Scope of Before Suite--> it is the scope of entire test suite, writting it in a class is enough..if we run before the entire suite.same goes for After suite but it executes after the test suite is completed.


Points to remember:
@AfterMethod,@BeforeMethod,@BeforeClass,@AfterClass--> controled at class level
@BeforeTest,@AfterTest,@AfterSuite,@BeforeSuite--> controlled at testng xml file level
In testng order of execution of tests depend upon the alphabetical order


Interview question:

diff btn before method and before test

before method:
it runs before every method in that class...It is specific to a class. the same goes with after method.runs before everymethod in that class specified in the xml file, but specific only to that class.

before test:
it runs before the test execution specfified in the testng xml file. teh same goes for the after test method. the scope is that of the test module mentioned in the testng xml file.

Dependency Attributes:

This is used for prioritizing the test cases. or change the order of execution.

@Test(dependsOnMethods={"function_name"})-> the following test function will run only if the function_name is success.
@Test(enabled=false)-> this test will be skipped, if true the test will run.
@Test(dependsOnMethods ={"function_name"},alwaysRun=true)-> the following test would be run even if the function_name has failed. but this test will run only after function_name.
@Test(timeOut=5000)-> this is set a time out for that function, even though the script executes but executing time is more than 5 seconds(5000 milli seconds) then it will show as fail.


Group feature in TestNG:

It is helpful in running priority testcases, we can assign priority for test cases like P1 or P2
@Test(groups="Priority 1")
this is like setting a tag for certain cases and you can use this tag and run those test cases alone.

<?xml version="1.0" encoding="UTF-8" ?>
<suite name="Automation Testing">
    <test name="Smoke Testing with groups">
        <groups>
            <run>
                <include name="Priority1"/>
            </run>
        </groups>
        <classes>
            <class name="TestNGFiles.annotations">
            </class>
            <class name = "TestNGFiles.annotations1"></class>
        </classes>
    </test>
</suite>

the above code will run test cases which has Priority1 tag alone. In the above code we can also exclude to stop executing certain test cases.

Helper attributes for tests in testng:
dependsOn
enabled
timeOut

Also there might be a situation where we need to run a test case before another, simply put; one depend on the success of another test.

In that scenario use @Test(dependsOnMethods="testfunctionname") see repo learning_framework for the usasge. tweak the execution order. You can even add multiple dependency methods.

@Test(enabled=false)

Interview question
enabled-->false will stop test from executing

@Test(timeOut=4000)
waits for maximum of 40 seconds.
